@startuml joiningPool
actor Owner #Red
actor Borrower #Green
actor TruHolders

Borrower -> LoanFactory : **createLoanToken**
activate LoanFactory
LoanFactory <- LoanFactory : checks if //amount// and //term// are greater than 0

LoanFactory -> LoanToken : create new instance of **LoanToken**
activate LoanToken
LoanFactory <- LoanFactory : add created **LoanToken** address to existing tokens mapping
LoanFactory <-- LoanToken
deactivate LoanToken

Borrower <-- LoanFactory
deactivate LoanFactory

Owner -> TrueRatingAgency : **allow** Borrower for submitting
activate TrueRatingAgency
TrueRatingAgency <- TrueRatingAgency : **add** Borrower to //allowedSubmitters//
Owner <-- TrueRatingAgency
deactivate TrueRatingAgency

Borrower -> TrueRatingAgency : **submit** **LoanToken**
activate TrueRatingAgency
TrueRatingAgency <- TrueRatingAgency : check if **status** is //void//
TrueRatingAgency <- TrueRatingAgency : check if Borrower is in //allowedSubmitters//

TrueRatingAgency -> LoanFactory : check if **LoanToken** is created by **LoanFactory**
activate LoanFactory
LoanFactory <- LoanFactory : checks if in //isLoanToken//
TrueRatingAgency <-- LoanFactory
deactivate LoanFactory

Borrower <-- TrueRatingAgency
deactivate TrueRatingAgency

break when Borrower wants to retract
    Borrower -> TrueRatingAgency : **retract** **LoanToken**
    activate TrueRatingAgency
    TrueRatingAgency <- TrueRatingAgency : checks if **status** is //pending//
    TrueRatingAgency <- TrueRatingAgency : checks if Borrower created **LoanToken**
    TrueRatingAgency <- TrueRatingAgency : deletes LoanToken from **TrueRatingAgency**
    Borrower <-- TrueRatingAgency
    deactivate TrueRatingAgency
    end

TruHolders -> TrueRatingAgency : vote **yes/no** with stakes for **LoanToken**
activate TrueRatingAgency
TrueRatingAgency <- TrueRatingAgency : check if **status** is //pending//
TrueRatingAgency <- TrueRatingAgency : add vote stakes to votes and predictions
TruHolders <-- TrueRatingAgency
deactivate TrueRatingAgency

opt when PoolParticipant wants to withdraw some/all votes
    TruHolders -> TrueRatingAgency : **withdraw** staked **yes/no** votes
    activate TrueRatingAgency
    TrueRatingAgency <- TrueRatingAgency : check if **status** is __not__ //running//
    TrueRatingAgency <- TrueRatingAgency : remove vote stakes from votes and predictions
    TruHolders <-- TrueRatingAgency
    deactivate TrueRatingAgency
    end

Borrower -> TrueLender : **fund** **LoanToken**
activate TrueLender

TrueLender -> LoanToken : check if __sender__ is **LoanToken's** //borrower//
activate LoanToken
TrueLender <-- LoanToken
deactivate LoanToken

TrueLender -> LoanToken : check if **isLoanToken**
activate LoanToken
TrueLender <-- LoanToken : returns __true__
deactivate LoanToken

TrueLender -> LoanToken : checks if **LoanToken's** //currencyToken// is equal to //currencyToken//
activate LoanToken
TrueLender <-- LoanToken
deactivate LoanToken

TrueLender <- TrueLender : checks if length of //_loans// is lower than //maxLoans//

TrueLender -> LoanToken : **getParameters**
activate LoanToken
TrueLender <-- LoanToken : returns //amount apy term//
deactivate LoanToken

TrueLender -> LoanToken : calculates **receivedAmount** including Borrower fee
activate LoanToken
TrueLender <-- LoanToken : returns //receivedAmount//
deactivate LoanToken

TrueLender -> TrueRatingAgency : **getResults** of voting
activate TrueRatingAgency
TrueLender <-- TrueRatingAgency : returns //start no yes//
deactivate TrueRatingAgency

TrueLender <- TrueLender : checks if //amount// is between //minSize// and //maxSize//
TrueLender <- TrueLender : checks if //term// is between //minTerm// and //maxTerm//
TrueLender <- TrueLender : checks if //apy// is between //minApy// and //maxApy//
TrueLender <- TrueLender : checks if at least //votingTime// has passed from //start//
TrueLender <- TrueLender : checks if //yes// have reached the threshold
TrueLender <- TrueLender : checks if **loanIsCredible**

TrueLender <- TrueLender : add **LoanToken** to //_loans//

TrueLender -> TrueFiPool : **borrow** //receivedAmount// from **TrueFiPool**
activate TrueFiPool

TrueFiPool -> TUSD : **transfer** to **TrueLender**
activate TUSD
TUSD <- TUSD : remove from **TrueFiPool** balance and add to **TrueLenderBalance**
TrueFiPool <-- TUSD
deactivate TUSD

TrueLender <-- TrueFiPool
deactivate TrueFiPool

TrueLender -> TUSD : **approve** **LoanToken** for //receivedAmount//
activate TUSD
TrueLender <-- TUSD
deactivate TUSD

TrueLender -> LoanToken : **fund** **LoanToken**
activate LoanToken
LoanToken <- LoanToken : change //status// to funded
LoanToken <- LoanToken : set //start// of the loan
LoanToken <- LoanToken : **_mint** LoanTokens to **TrueLender**
LoanToken <- LoanToken : **_mint** LoanTokens to **TrueLender**

LoanToken -> TUSD : **transfer** //receivedAmount// to **Borrower**
activate TUSD
TUSD <- TUSD : remove from **LoanToken** balance and add to **Borrower**
LoanToken <-- TUSD
deactivate TUSD

TrueLender <-- LoanToken
deactivate LoanToken

Borrower <-- TrueLender
deactivate TrueLender

@enduml