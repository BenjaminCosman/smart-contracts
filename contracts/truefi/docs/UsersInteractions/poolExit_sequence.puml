@startuml exitingPool
actor User

User -> TrueFiPool : **exit** pool
activate TrueFiPool

TrueFiPool <- TrueFiPool: check if at least one block has passed from joining
TrueFiPool <- TrueFiPool: check if User's balance can cover requested withdraw
TrueFiPool <- TrueFiPool: **burn** pool tokens

TrueFiPool -> TrueLender: **distribute** portion of every existing loan's TrustTokens
activate TrueLender

loop for each LoanToken

    TrueLender -> LoanToken: request **transfer** to User's balance 
    activate LoanToken
    LoanToken <- LoanToken: **transfer** a portion of TrustTokens to User's balance
    TrueLender <-- LoanToken
    deactivate LoanToken
    end

TrueFiPool <-- TrueLender
deactivate TrueLender

TrueFiPool -> TUSD: request **transfer** to User's balance as portion of shares

activate TUSD
TUSD <- TUSD: performs **transfer**
TrueFiPool <-- TUSD
deactivate TUSD

TrueFiPool -> CurvePool: request **transfer** to User's balance as other portion of shares

activate CurvePool
CurvePool <- CurvePool: performs **transfer**
TrueFiPool <-- CurvePool
deactivate CurvePool

User <-- TrueFiPool
deactivate TrueFiPool
@enduml